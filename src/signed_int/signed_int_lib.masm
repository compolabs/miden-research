# Signed Integer Library [IN PROGRESS]
#
# The max uint in Miden VM is 2**64 - 2**32 = 18446744069414584320

const.MAX_POSITIVE_INT=9223372034707292160
const.MAX_VAL=18446744069414584320

proc.to_negative
    push.MAX_VAL
    swap
    sub
end

proc.from_negative
    push.MAX_VAL
    swap
    sub
end

# [b, a]
proc.signed_add

    # must check for overflow
    dup
    # [b, b, a]

    push.MAX_VAL
    # [max_val, b, b, a]

    swap
    # [b, max_val, b, a]

    sub
    # [diff, b, a]

    swap.2
    # [a, b, diff]

    dup
    # [a, a, b, diff]

    swap.2
    # [b, a, a, diff]

    swap.3
    # [diff, a, a, b]

    gt
    #[overflow_bool, a, b]

    if.true
        add
        add.1
    else
        add
    end
end

proc.signed_sub
    # check for overflow / underflow
    dup
    # [b, b, a]

    push.MAX_VAL
    # [max_val, b, b, a]

    swap
    # [b, max_val, b, a]

    sub
    # [diff, b, a]

    swap.2
    # [a, b, diff]

    dup
    # [a, a, b, diff]

    swap.2
    # [b, a, a, diff]

    swap.3
    # [diff, a, a, b]

    gt
    #[overflow_bool, a, b]

    if.true
        dup.1
        dup.1
        lt
        if.true
            sub
            sub.1
        else
            sub
        end

    else
        dup.1
        dup.1
        lt
        if.true
            sub
            sub.1
        else
            sub
        end

    end

end

# uses memory addresses 0 & 1
proc.signed_mul
    dup.1 dup.1
    # [b, a, b, a]

    push.MAX_POSITIVE_INT
    # [max_pos, b, a, b, a]

    gt
    # [bool, a, b, a]

    swap.4 drop
    # [a, b, a, bool]

    push.MAX_POSITIVE_INT
    # [max_pos, a, b, a, bool]

    gt

    swap.4 drop
    # [a, b, bool, bool]

    swap.4 drop
    swap.4 drop
    swap
    # [bool_a, bool_b, b, a]

    dup.1
    dup.1

    mem_store.0
    mem_store.1
    # [bool_a, bool_b, b, a]

    swap
    # [bool_b, bool_a, b, a]

    if.true
        swap
        exec.from_negative
    else
        swap
        # [b, bool_a, a]
    end

    swap
    # [bool_a, b, a]

    if.true
        swap
        exec.from_negative
    else
        swap
        # [a, b]
    end

    # [a, b]
    mul

    mem_load.1
    mem_load.0
    # [bool_a, bool_b, prod]

    xor
    # [xor, prod]

    if.true
        exec.to_negative
    else
        # nothing
    end

end

# uses memory addresses 0 & 1
proc.signed_div

    dup.1 dup.1
    # [b, a, b, a]

    push.MAX_POSITIVE_INT
    # [max_pos, b, a, b, a]

    gt
    # [bool, a, b, a]

    swap.4 drop
    # [a, b, a, bool]

    push.MAX_POSITIVE_INT
    # [max_pos, a, b, a, bool]

    gt

    swap.4 drop
    # [a, b, bool, bool]

    swap.4 drop
    swap.4 drop
    swap
    # [bool_a, bool_b, b, a]

    dup.1
    dup.1

    mem_store.0
    mem_store.1
    # [bool_a, bool_b, b, a]

    swap
    # [bool_b, bool_a, b, a]

    if.true
        swap
        exec.from_negative
    else
        swap
        # [b, bool_a, a]
    end

    swap
    # [bool_a, b, a]

    if.true
        swap
        exec.from_negative
    else
        swap
        # [a, b]
    end

    # [a, b]
    u32div
    # div

    mem_load.1
    mem_load.0
    # [bool_a, bool_b, prod]

    xor
    # [xor, prod]

    if.true
        exec.to_negative
    else
        # nothing
    end

end

begin
    # basic usage of signed integer functions
    drop drop

    push.10.5
    exec.signed_mul

    drop drop
    push.40.20
    exec.signed_div

    drop drop
    push.20.20
    exec.signed_add

    drop drop
    push.20.10
    exec.signed_sub
end
